import { createDemo } from './demo.mjs';
const content = document.getElementsByClassName('page-content')[0];
content.appendChild(createDemo({
  location: globalThis.location,
  version: "0.0.0",
  base: "// Target //\n\nconst fac = (n) => (n === 0 ? 1 : n * fac(n - 1));\n\nfac(6);\n",
  meta: "// Instrumentation //\n\n/** @type {import(\"../../context.d.ts\").Context} */\nconst {\n  log,\n  target,\n  aran: { instrument },\n  astring: { generate },\n  acorn: { parse },\n} = /** @type {any} */ (globalThis).__context;\n\n/** @type {(value: unknown) => string} */\nconst show = (value) => {\n  if (typeof value === \"function\") {\n    return String(value.name || \"anonynmous\");\n  } else if (typeof value === \"object\" && value !== null) {\n    return \"#\" + Object.prototype.toString.call(value).slice(8, -1);\n  } else if (typeof value === \"symbol\") {\n    return \"@\" + String(value.description ?? \"unknown\");\n  } else if (typeof value === \"string\") {\n    return JSON.stringify(value);\n  } else {\n    return String(value);\n  }\n};\n\nconst advice_global_variable = \"_ARAN_ADVICE_\";\n\nlet depth = 0;\n\n/** @type {import(\"aran\").StandardAdvice} */\nconst advice = {\n  \"apply@around\": (_state, callee, that, input, _location) => {\n    depth += 1;\n    const indent = \"..\".repeat(depth);\n    try {\n      const args = [\n        ...(that === undefined ? [] : [`this=${show(that)}`]),\n        ...input.map(show),\n      ];\n      log(indent + \" >> \" + show(callee) + \"(\" + args.join(\", \") + \")\");\n      const result = Reflect.apply(/** @type {any} */ (callee), that, input);\n      log(`${indent} << ${show(result)}`);\n      return result;\n    } catch (error) {\n      log(`${indent} !! ${show(error)}`);\n      throw error;\n    } finally {\n      depth -= 1;\n    }\n  },\n};\n\nReflect.defineProperty(globalThis, advice_global_variable, { value: advice });\nconst root1 = parse(target, { sourceType: \"script\", ecmaVersion: 2024 });\nconst root2 = instrument(\n  { kind: \"eval\", path: \"main\", root: root1 },\n  // In standalone mode, the intrinsic record requires no setup.\n  { mode: \"standalone\", advice_global_variable, pointcut: [\"apply@around\"] },\n);\nglobalThis.eval(generate(root2));\n",
  worker: './worker.mjs',
  header_class: 'wrapper',
}));
