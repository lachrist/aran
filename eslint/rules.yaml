##########
# Custom #
##########
local/no-globals: [error, globalThis, console]
local/literal-unique: [error]
local/literal-basename: [error]
################
# Core Complex #
################
no-unused-vars:
  - error
  - vars: all
    varsIgnorePattern: "^_"
    args: all
    argsIgnorePattern: "^_"
    caughtErrors: all
    caughtErrorsIgnorePattern: "^_"
    ignoreRestSiblings: false
no-restricted-syntax:
  # https://estools.github.io/esquery/
  - error
  # Type Wide
  # - ForOfStatement
  - AwaitExpression
  - YieldExpression
  - UpdateExpression
  - ChainExpression
  - LabeledStatement
  # - BreakStatement
  # - ContinueStatement
  - FunctionExpression
  - FunctionDeclaration
  - ClassDeclaration
  - ClassExpression
  # Disable bitwise binary operators and non-strict comparison operatos
  - BinaryExpression:matches([operator="=="][right.value!=null]) # null or undefined check
  - BinaryExpression:matches([operator="!="][right.value!=null]) # null or undefined check
  - BinaryExpression[operator="&"]
  - BinaryExpression[operator="|"]
  - BinaryExpression[operator="^"]
  - BinaryExpression[operator="~"]
  - BinaryExpression[operator="<<"]
  - BinaryExpression[operator=">>"]
  - BinaryExpression[operator=">>>"]
  # AssignmentExpression
  - :not(ExpressionStatement, ForStatement) > AssignmentExpression
  - ForStatement > AssignmentExpression.init, AssignmentExpression.test
  # Disable Accessor
  - MethodDefinition[kind="get"]
  - MethodDefinition[kind="set"]
  - Property[kind="get"]
  - Property[kind="set"]
  # Ignored Variable
  # - :not(ObjectExpression > Property[computed=false] > Identifier.key)
  #   :not(MemberExpression[computed=false] > Identifier.property)
  #   :not(FunctionExpression > Identifier.params)
  #   :not(ArrowFunctionExpression > Identifier.params)
  #     Identifier[name=/^_/u]
  # Variable declaration
  - VariableDeclaration[kind=var]
  - VariableDeclaration[declarations.length>1]
  # - :not(ForInStatement) > VariableDeclaration > VariableDeclarator[init=null]
  # Asynchronous closures
  - ArrowFunctionExpression[async=true]
  # Empty ReturnStatement
  - ReturnStatement[argument=null]
  # CallExpression
  - :not(CallExpression[callee.type="MemberExpression"][callee.object.type="Identifier"][callee.object.name="console"])CallExpression[callee.type="MemberExpression"]
  # Literal Computation
  # - BinaryExpression[left.type="Literal"][right.type="Literal"]
  # - UnaryExpression[argument.type="Literal"]
###############
# Core Simple #
###############
# accessor-pairs >> Accessors disabled by no-restricted-syntax
# array-bracket-newline: [error, consistent] >> Prettier
# array-bracket-spacing: [error, never] >> Prettier
# array-callback-return >> heuristic + array-lite
# array-element-newline: [error, consistent] >> Prettier
arrow-body-style: [error, as-needed]
arrow-parens: [error, always]
# arrow-spacing: [error, before:true, after:true] >> Prettier
# block-scoped-var >> Only es2015 variables enforced by no-restricted-syntax
# block-spacing: [error, always] >> Prettier
# brace-style: [error, 1tbs] >> Prettier
# capitalized-comments: [error, always] >> comment
# class-methods-use-this >> Class disabled by no-restrictied syntax
comma-dangle: [error, always-multiline]
# comma-spacing: [error, {before:false, after:true}] >> Prettier
# comma-style: [error, last] >> Prettier
# complexity
# computed-property-spacing: [error, never] >> Prettier
consistent-return: error
# consistent-this: [error]
# constructor-super: error >> Class are disabled by no-restricted-syntax
curly: [error, all]
# default-case >> SwitchStatement disabled by no-restricted-syntax
# default-case-last >> SwitchStatement disabled by no-restricted-syntax
default-param-last: error # TODO: disable default parameters
# dot-location: [error, object] >> Prettier
dot-notation: [error, { allowKeywords: true }]
# eol-last: [error, always] >> Prettier
# eqeqeq >> BinaryExpression[!=|==] disabled by no-restricted-syntax
# for-direction >> Heuristic
# func-call-spacing: [error, never] >> Prettier
# func-name-matching: [error, always] >> Function disabled by no-restricted-syntax
# func-names >> Function disabled by no-restricted-syntax
# func-style: [error, expression] >> Function disabled by no-restricted-syntax
# function-call-argument-newline: [error, consistent] >> Prettier
# function-paren-newline: [error, never] >> Prettier
# generator-star-spacing >> Prettier
# getter-return >> Accessor disabled by no-restricted-syntax
# grouped-accessor-pairs >> Accessors disabled by no-restricted-syntax
# guard-for-in >> Heuristic
# id-blacklist >> deprecated to id-denylist
# id-denylist >> Heuristic
# id-length >> Heuristic
# id-match >> Hoopfully camelcase is enough
# implicit-arrow-linebreak: [error, beside] >> Prettier
# indent: [error, 2] >> Prettier
# init-declarations >> VariableDeclarator[init=null] disabled by no-restricted-syntax
# jsx-quotes >> no JSX
# key-spacing: [error, beforeColon:false, afterColon:true, mode:strict] >> Prettier
# keyword-spacing: [error, {before:true, after:true}] >> Prettier
# linebreak-style: [error, unix] >> Prettier
# lines-around-comment >> Not intersted in enforcing comment style
# lines-between-class-members >> Prettier
# max-classes-per-file >> Heurisitic + Class disabled by no-restricted-syntax
# max-depth >> Heuristic
# max-len >> Heuristic
# max-lines >> Heuristic
# max-lines-per-function >> Heuristic
# max-nested-callbacks >> Heuristic
# max-params >> Heuristic
# max-statements >> Heuristic
# max-statements-per-line: [error, {max:1}] >> Prettier
# multiline-comment-style: [error, separate-lines] >> Not intersted in enforcing comment style
# multiline-ternary >> Prettier
new-cap: [error, { newIsCap: true }]
new-parens: [error, always]
# newline-per-chained-call >> Prettier
# no-alert >> No browser environemnt
# no-array-constructor >> No Array global
# no-arrow-condition >> deprecated
# no-async-promise-executor >> Asynchronous closures disabled by no-restricted-syntax
# no-await-in-loop >> Asynchronous closures disabled by no-restricted-syntax
# no-buffer-constructor >> No node environment
# no-bitwise >> Bitwise binary operator disabled by no-restricted-syntax
# no-caller >> disabled prefer-rest-params
no-case-declarations: error
# no-catch-shadow >> deprecated
# no-class-assign >> ClassDeclaration disabled by no-restricted-syntax
# no-comma-dangle >> deprecated
# no-compare-neg-zero >> Heuristic
# no-cond-assign >> Heuristic
# no-confusing-arrow >> TODO
no-console: warn # Enabled even if heuristic
no-const-assign: error
# no-constant-condition: error >> Heuristic -- eg: while (true) {}
# no-constructor-return: error >> Class disabled by no-restricted-syntax
# no-continue >> ContinueStatement disabled by no-restricted-syntax
# no-control-regex >> Heuristic
no-debugger: warn
# no-delete-var >> Strict mode enforced by parserOptions
# no-div-regex >> Chelou
# no-dupe-args >> Strict-mode enforced by parserOptions
# no-dupe-class-members: error >> Class disabled by no-restrictied-syntax
# no-dupe-else-if >> Heuristic
no-dupe-keys: error
# no-duplicate-case >> SwitchStatement disabled by no-restricted-syntax
no-duplicate-imports: error
# no-else-return: [error, {allowElseIf: false}]
# no-empty-character-class >> RegExp
# no-empty-function >> Why?
# no-empty-pattern: error >> Why?
no-empty: error
# no-eq-null >> Non-strict comparison operators disabled by no-restricted-syntax
no-eval: error
no-ex-assign: error
# no-extend-native >> No globals
# no-extra-bind >> Heuristic
# no-extra-boolean-cast >> Heuristic
# no-extra-parens:
#   - error
#   - all
#   - enforceForArrowConditionals: false
#     nestedBinaryExpressions: false
#     enforceForSequenceExpressions: false
no-extra-semi: error
# no-extra-strict >> deprecated
# no-fallthrough >> SwitchStatement disabled by no-restricted-syntax
no-floating-decimal: error
# no-func-assign >> FunctionDeclaration disabled by no-restricted-syntax
# no-global-assign >> No globals
# no-implicit-coercion >> Heuristic
# no-implicit-globals >> Strict mode enforced by parseOptions
# no-implied-eval >> Heuristic
no-import-assign: error
# no-inline-comments >> Not interesting in enforcing comment style
# no-inner-declarations >> FunctionDeclaration disabled by no-restricted-syntax
# no-invalid-regexp >> RegExp global disabled by no-restricted-globals
# no-invalid-this >> Heuristic
# no-irregular-whitespace: error >> Prettier
# no-iterator >> Heuristic
# no-label-var >> LabeledStatement disabled by no-restricted-syntax
# no-labels >> LabeledStatement disabled by no-restricted-syntax
no-lone-blocks: error
# no-lonely-if: error >> sometimes it makes more sense to group a secondary branching in the else clause.
# no-loop-func >> FunctionDeclaration disabled by no-restricted-syntax
no-loss-of-precision: error
# no-magic-numbers
# no-misleading-character-class >> RegExp
# no-mixed-spaces-and-tabs >> Prettier
# no-mixed-operators: [error, { allowSamePrecedence: false }]
# no-mixed-requires >> deprecated
# no-multi-assign: error >> AssignemntExpression disabled in this context by no-restricted-syntax
# no-multi-spaces: error >> Prettier
no-multi-str: error
# no-multiple-empty-lines >> Prettier
# no-negated-condition: error >> Heuristic
# no-nested-ternary >> I have plenty of those
# no-new-func >> No globals
# no-new-object >> No Object global
# no-new-symbol >> No Symbol global
# no-new-wrappers >> No globals
no-new: [error]
# no-nonoctal-decimal-escape >> Octal disabled in strict mode
# no-octal >> Octal disabled in strict mode
# no-obj-calls >> globals disabled
# no-octal-escape >> Octal disabled in strict mode
# no-octal >> Octal disabled in strict mode
# no-param-reassign: error
# no-path-concat >> deprecated
# no-plusplus >> UpdateExpression Disabled by no-restricted-syntax
# no-process-env >> deprecated
# no-process-exit >> deprecated
no-promise-executor-return: error
no-proto: error
# no-prototype-builtins >> Heuristic
# no-redeclare >> Only es2015 variables enforced by no-restricted-syntax
# no-regex-spaces >> RegExp
# no-restricted-exports
# no-restricted-imports
# no-restricted-properties
# no-return-assign >> AssignmentExpression disabled in this context by no-restricted-syntax
# no-return-await >> Asynchronous closures disabled by no-restricted-syntax
# no-script-url >> heuristic
no-self-assign: error
no-self-compare: error
# no-sequences >> I have plenty of those
# no-setter-return >> Accessors disabled by no-restricted-syntax
# no-shadow: error
# no-shadow-restricted-names >> Shadowing is disabled
no-sparse-arrays: error
# no-tabs: error # Style
# no-template-curly-in-string >> Heuristic
# no-ternary >> I have plenty of those
# no-this-before-super: error >> Class disabled by no restricted-syntax
# no-throw-literal
# no-trailing-spaces: error >> Prettier
# no-undef-init >> I want explicit init
no-undef: [error, { typeof: true }]
# no-undefined >> I used local undefined variable
# no-underscore-dangle >> redundant with camel-case
# no-unexpected-multiline >> Prettier
# no-unmodified-loop-condition > heuristic
# no-unneeded-ternary
no-unreachable-loop: error
no-unreachable: error
no-unsafe-finally: error
no-unsafe-negation: error
# no-unsafe-optional-chaining >> ChainExpression disabled by no-restricted-syntax
# no-unused-expressions: error >> Heuristic
# no-unused-labels >> LabeledStatement disabled by no-restrict-syntax
# no-unused-private-class-members >> Class disabled by no-restricted-syntax
no-use-before-define: error
# no-useless-backreference >> RegExp
# no-useless-call >> Heuristic
no-useless-catch: error
no-useless-computed-key: error
# no-useless-concat: error >> Sometimes I use concatenation to construct multiline string
# no-useless-constructor: error >> Class disabled by no-restricted-syntax
no-useless-rename: error
# no-useless-return >> ReturnStatement[argument=null] disabled by no-restrict-syntax
# no-var >> VariableDeclaration[kind="var"] disabled by no-restricted-syntax
# no-void >> I have plenty of those to create undefined value
# no-warning-comments: [warn, {location:start, terms:[todo,fixme]}]
# no-whitespace-before-property: error >> Prettier
# no-with >> Strict-mode enforced by parsing options
# nonblock-statement-body-position >> Body BlockStatement enforced by no-restricted-syntax
# object-curly-newline: [error, {multiline:true, consistent:true}] >> Prettier
# object-curly-spacing: [error, always] >> Prettier
# object-property-newline >> Prettier
object-shorthand: [error, always]
# one-var >> VariableDeclaration[declarations.length>1] disabled by no-restricted-syntax
# one-var-declaration-per-line >> VariableDeclaration[declarations.length>1] disabled by no-restricted-syntax
operator-assignment: [error, always]
# operator-linebreak: [error, after] >> Prettier
# padded-blocks >> Prettier
# padding-line-between-statements >> Prettier
# prefer-arrow-callback >> Function disabled by no-restricted-syntax
prefer-const: [error, { destructuring: any }]
# prefer-destructuring: error >> not intersted
# prefer-exponentiation-operator >> heuristic
# prefer-named-capture-group: error >> RegExp
# prefer-numeric-literals >> no Number or parseInt global
# prefer-object-spread >> Heuristic
# prefer-promise-reject-errors >> No globals
# prefer-regex-literals >> No globals
prefer-rest-params: error
# prefer-spread >> Heuristic
prefer-template: error
quote-props: [error, consistent-as-needed]
# quotes: [error, double] >> Prettier
# radix >> No globals
# require-atomic-updates >> Asynchronous and generator closures disabled by no-restricted-syntax
# require-await >> Asynchronous closures disabled by no-restricted-syntax
require-unicode-regexp: error
# require-yield >> Generator closures disabled by no-restrict-syntax
# rest-spread-spacing: [error, never] >> Prettier
# semi-spacing: [error, {before:false, after:false}] >> Prettier
# semi-style: [error, last] >> Prettier
semi: [error, always]
# sort-imports
# sort-keys
# sort-vars
# space-before-blocks: [error, always] >> Prettier
# space-before-function-paren: [error, always] >> Prettier
# space-in-parens: [error, never] >> Prettier
# space-infix-ops: [error] >> Prettier
# space-unary-ops: [error, {words:true, nonwords:false}] >> syle
# spaced-comment: [error, always] >> Prettier
strict: [error, never]
# switch-colon-spacing >> cf no-restricted-syntax >> SwitchStatement
# symbol-description >> No Symbol global
template-curly-spacing: [error, never]
# template-tag-spacing: [error, never] >> Prettier
unicode-bom: [error, never]
# use-isnan >> Heuristic
# valid-jsdoc >> Deprecated
valid-typeof: [error, { requireStringLiterals: true }]
# vars-on-top >> Variables are disabled by no-restricted-syntax
# wrap-iife: [error, outside] >> Function disabled by no-restricted-syntax
wrap-regex: error
# yield-star-spacing >> Generator closures disabled by no-restrict-syntax
yoda: [error, never]
#################
# Plugin Import #
#################
import/default: error
# import/dynamic-import-chunkname: error
import/export: error
# import/exports-last: error
# import/extensions: error
import/first: error
# import/group-exports: error
# import/max-dependencies: error
import/named: error
# import/namespace
# import/newline-after-import: error
import/no-absolute-path: error
# import/no-amd: error
# import/no-anonymous-default-export: error
# import/no-commonjs: error
import/no-cycle: error
# import/no-default-export: error
import/no-deprecated: error
import/no-duplicates: error
# import/no-dynamic-require: error
import/no-extraneous-dependencies: error
# import/no-import-module-exports: error
# import/no-internal-modules: error
import/no-mutable-exports: error
# import/no-named-as-default-member: error
# import/no-named-as-default: error
import/no-named-default: error
# import/no-named-export: error
# import/no-namespace: error
import/no-nodejs-modules: error
# import/no-relative-packages: error
# import/no-relative-parent-imports: error
# import/no-restricted-paths
import/no-self-import: error
# import/no-unassigned-import: error
import/no-unresolved: error
# import/no-unused-modules: error
import/no-useless-path-segments: error
# import/no-webpack-loader-syntax: error
# import/order: error
# import/prefer-default-export: error
# import/unambiguous: error
