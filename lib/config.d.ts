import type { Variable } from "./estree";
import type { Json } from "./json";
import type { Pointcut as StandardPointcut } from "./weave/standard/aspect";
import type { Pointcut as FlexiblePointcut } from "./weave/flexible/aspect";

export type Config = {
  /**
   * Indicates whether or not the setup code should be bundle with the
   * instrumented code. The setup code is generated by `generateSetup` and
   * simply defines a global variable that holds all the intrinsic values used
   * by Aran.
   *
   * - `"normal"`: Do not bundle the setup code with the instrumented code.
   * Setup code is expected to have been executed once before any instrumented
   * code. This is the mode you should use for real-world use cases.
   * - `"standalone"`: Bundle the setup code with the instrumented code. It does
   * no longer require prior execution of the setup code but multiple
   * instrumented code will interact well. This is the mode you should use to
   * investigate and share standalone instrumented snippets.
   *
   * Default: `"normal"`.
   */
  mode: "normal" | "standalone";
  /**
   * The pointcut for the standard weaving API. Either `standard_pointcut` or
   * `flexible_pointcut` should be defined but not both.
   *
   * Default: `null`.
   */
  standard_pointcut: null | StandardPointcut;
  /**
   * The pointcut for the flexible weaving API. Either `standard_pointcut` or
   * `flexible_pointcut` should be defined but not both.
   *
   * Default: `null`.
   */
  flexible_pointcut: null | FlexiblePointcut;
  /**
   * The initial state passed to advice functions. It will be cloned with JSON
   * serialization.
   *
   * Default: `null`.
   */
  initial_state: Json;
  /**
   * Indicates whether the global declarative record should be emulated or not.
   * NB: The global declarative record is a scope frame that sits right before
   * the global object. For instance, in *script* code (not eval code nor module
   * code): `let x = 123` will cause the creation of a binding in the global
   * declarative record and not in the global object. Unfortunately, this record
   * cannot be accessed inside the language and we are stuck with two imperfect
   * options:
   *
   * - `"builtin"`: The builtin global declarative record is used, access to
   * global variables will happen via parameter functions such as: `scope.read`,
   * `scope.writeSloppy`, etc... Tracking values through these calls requires
   * additional logic.
   * - `"emulate"`: A plain object is used to emulate the global declarative
   * record. That means that instrumented code will never access the builtin
   * global declarative record. Hence, every single bit of code should be
   * instrumented which might be a hard requirement to meet.
   *
   * Default: `"builtin"`.
   */
  global_declarative_record: "builtin" | "emulate";
  /**
   * Defines the behavior of warnings:
   *
   * - `"embed"`: Warnings are stored in `_aran_warning_array_`
   * - `"console"`: Warnings are reported with `console.warn`
   * - `"ignore"`: Warnings are ignored
   * - `"throw"`: If present, the first warning is thrown as an error
   *
   * Default: `"embed"`.
   */
  warning: "embed" | "console" | "ignore" | "throw";
  /**
   * Defines the behavior of early syntax errors:
   *
   * - `"embed"`: The instrumentation will succeed but executing the instrumented
   * code will cause the first syntax error to be thrown. The error is reported
   * after parsing but it will originate from the realm targeted by the code.
   * - `"throw"`: The instrumentation throw the first early syntax error as an
   * `AranSyntaxError` with extends `SyntaxError`. The error is reported early
   * and it will originate from the current realm and not necessarily the realm
   * targeted by the code.
   *
   * Default: `"embed"`.
   */
  early_syntax_error: "embed" | "throw";
  /**
   * The global variable that refer to the global object. This is only used when
   * `mode` is `"standalone"`. Change this value only of `globalThis` do not
   * refer to the global object for some reason.
   *
   * Default: `globalThis`.
   */
  global_variable: Variable;
  /**
   * The global variable that refers to the intrinsic object defined by the setup
   * code. Make sure it does not clash with other global variables.
   *
   * Default: `"_ARAN_INTRINSIC_"`.
   */
  intrinsic_variable: Variable;
  /**
   * The global variable that refers to the advice object for standard weaving.
   * Make sure it does not clash with other global variables.
   *
   * Default: `"_ARAN_ADVICE_"`.
   */
  advice_variable: Variable;
  /**
   * Internal variables are prefixed with this string to avoid clashes with
   * external variables.
   *
   * Default: `"_aran_"`.
   */
  escape_prefix: Variable;
};
